{"version":3,"sources":["API/Instance.js","API/UsersApi.js","views/pages/login/Login.js"],"names":["Instance","axios","create","baseURL","headers","localStorage","getItem","UsersApi","login","password","credentials","btoa","basicAuth","get","response","data","console","log","payload","post","id","put","delete","Login","useState","username","setUsername","setPassword","errorMessage","setErrorMessage","useContext","AuthContext","setIsAuth","_","a","getMe","setItem","defaults","className","md","name","type","placeholder","autoComplete","value","onChange","e","target","xs","color","onClick"],"mappings":"4KAAA,aACMA,EADN,OACiBC,EAAMC,OAAO,CAC5BC,QAAS,oCACTC,QAAS,CACP,cAAiB,SAAWC,aAAaC,QAAQ,kBAItCN,O,+ICLMO,E,4IACAC,EAAOC,G,yFAEhBC,EAAcC,KAAK,GAAD,OAAIH,EAAJ,YAAaC,IAC/BG,EAAY,SAAWF,E,SACvBT,IAAMY,IACV,6CAA8C,CAC9CT,QAAS,CACP,cAAiBQ,K,gCAGbF,G,0DAED,G,+RAMgBV,IAASa,IAAI,U,cAA9BC,E,yBACCA,EAASC,M,gCAEhBC,QAAQC,IAAR,M,yLAIoBC,G,0FAEdlB,IAASmB,KAAK,SAAUD,G,sDAE9BF,QAAQC,IAAR,M,uLAIkBC,EAASE,G,0FAErBpB,IAASqB,IAAT,iBAAuBD,GAAMF,G,sDAEnCF,QAAQC,IAAR,M,2LAIoBG,G,0FAEdpB,IAASsB,OAAT,iBAA0BF,I,sDAEhCJ,QAAQC,IAAR,M,oQCoDSM,UAlFD,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAEXC,EAFW,KAEDC,EAFC,OAGcF,mBAAS,IAHvB,mBAGXf,EAHW,KAGDkB,EAHC,OAIsBH,mBAAS,IAJ/B,mBAIXI,EAJW,KAIGC,EAJH,OAMKC,qBAAWC,KAAxBC,GANQ,EAMXC,EANW,EAMRD,WAEJxB,EAAK,uCAAG,4BAAA0B,EAAA,sEACY3B,IAAS4B,MAAMV,EAAUhB,GADrC,QACNK,EADM,SAGVT,aAAa+B,QAAQ,cAAetB,GACpCE,QAAQC,IAAIjB,IAASqC,SAASjC,SAC9BJ,IAASqC,SAASjC,QAAlB,cAA6C,SAAWU,EACxDkB,GAAU,IAEVH,EAAgB,2IARN,2CAAH,qDAYX,OACE,yBAAKS,UAAU,sDACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMA,UAAU,0BACd,kBAAC,IAAD,CAAMC,GAAG,KACL,kBAAC,IAAD,CAAOD,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,wDACA,uBAAGA,UAAU,cAAb,yHACA,kBAAC,IAAD,CAAaA,UAAU,QACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,eAGhB,kBAAC,IAAD,CACEC,KAAK,OACLC,YAAY,8FACZC,aAAa,WACbC,MAAOnB,EACPoB,SAAU,SAAAC,GAAC,OAAIpB,EAAYoB,EAAEC,OAAOH,WAGxC,kBAAC,IAAD,CAAaN,UAAU,QACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,sBAGhB,kBAAC,IAAD,CACEC,KAAK,WACLC,YAAY,uCACZC,aAAa,mBACbC,MAAOnC,EACPoC,SAAU,SAAAC,GAAC,OAAInB,EAAYmB,EAAEC,OAAOH,WAGxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMI,GAAG,MACP,kBAAC,IAAD,CACEC,MAAM,UACNX,UAAU,QACVY,QAAS1C,GAHX,oCASJ,kBAAC,IAAD,CAAM8B,UAAU,+BACbV","file":"static/js/6.6edfdd62.chunk.js","sourcesContent":["import axios from \"axios\";\nconst Instance = axios.create({\n  baseURL: 'https://petstore.subx64.space/api',\n  headers: {\n    'Authorization': 'Basic ' + localStorage.getItem('credentials')\n  }\n})\n\nexport default Instance\n","import Instance from \"./Instance\";\nimport axios from \"axios\";\n\nexport default class UsersApi {\n  static async getMe(login, password) {\n    try {\n      const credentials = btoa(`${login}:${password}`)\n      const basicAuth = 'Basic ' + credentials\n      await axios.get(\n        'https://petstore.subx64.space/api/users/me', {\n        headers: {\n          'Authorization': basicAuth\n        }\n      })\n      return  credentials\n    } catch (err) {\n      return false\n    }\n  }\n\n  static async getAllUsers() {\n    try {\n      const response = await Instance.get('/users')\n      return response.data\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  static async addNewUser(payload) {\n    try {\n      await Instance.post('/users', payload)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  static async editUser(payload, id) {\n    try {\n      await Instance.put(`/users/${id}`, payload)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  static async deleteUser(id) {\n    try {\n      await Instance.delete(`/users/${id}`)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n}\n","import React, {useContext, useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport UsersApi from \"../../../API/UsersApi\";\nimport {AuthContext} from \"../../../context\";\nimport Instance from \"../../../API/Instance\";\n\nconst Login = () => {\n\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const {_, setIsAuth} = useContext(AuthContext)\n\n  const login = async () => {\n    const response  = await UsersApi.getMe(username, password)\n    if (response) {\n      localStorage.setItem('credentials', response)\n      console.log(Instance.defaults.headers)\n      Instance.defaults.headers['Authorization'] = 'Basic ' + response\n      setIsAuth(true)\n    } else {\n      setErrorMessage('Неверный логин или пароль')\n    }\n  }\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"4\">\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Вход</h1>\n                    <p className=\"text-muted\">Войдите в свой аккаунт</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"text\"\n                        placeholder=\"Имя пользователя\"\n                        autoComplete=\"username\"\n                        value={username}\n                        onChange={e => setUsername(e.target.value)}\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        type=\"password\"\n                        placeholder=\"Пароль\"\n                        autoComplete=\"current-password\"\n                        value={password}\n                        onChange={e => setPassword(e.target.value)}\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"12\">\n                        <CButton\n                          color=\"primary\"\n                          className=\"w-100\"\n                          onClick={login}\n                        >\n                          Войти\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                    <CRow className=\"justify-content-center mt-3\">\n                      {errorMessage}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n"],"sourceRoot":""}