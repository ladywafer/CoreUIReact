{"version":3,"sources":["API/Instance.js","API/UsersApi.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","myComponents/MyModal.jsx","views/dashboard/Dashboard.js"],"names":["Instance","axios","create","baseURL","headers","localStorage","getItem","UsersApi","login","password","credentials","btoa","basicAuth","get","response","data","console","log","payload","post","id","put","delete","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","MyModal","visible","setVisible","userData","setUserData","updateUsers","isButtonDisabled","useMemo","firstName","lastName","email","username","show","fluid","sm","action","method","type","placeholder","value","onChange","e","target","className","htmlFor","name","autoComplete","color","onClick","disabled","Dashboard","userState","undefined","useState","allUsers","setUsers","details","setDetails","modalNewUserVisibility","setModalNewUserVisibility","modalEditUserVisibility","setModalVEditUserVisibility","useEffect","fetchingUsers","a","getAllUsers","users","createNewUser","user","addNewUser","editUser","deleteUser","items","fields","key","label","_style","width","filter","sorter","itemsPerPage","pagination","align","columnFilter","tableFilter","striped","scopedSlots","item","index","variant","size","position","indexOf","newDetails","slice","splice","toggleDetails","includes"],"mappings":"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","file":"static/js/5.d6e11c53.chunk.js","sourcesContent":["import axios from \"axios\";\nconst Instance = axios.create({\n  baseURL: 'https://petstore.subx64.space/api',\n  headers: {\n    'Authorization': 'Basic ' + localStorage.getItem('credentials')\n  }\n})\n\nexport default Instance\n","import Instance from \"./Instance\";\nimport axios from \"axios\";\n\nexport default class UsersApi {\n  static async getMe(login, password) {\n    try {\n      const credentials = btoa(`${login}:${password}`)\n      const basicAuth = 'Basic ' + credentials\n      await axios.get(\n        'https://petstore.subx64.space/api/users/me', {\n        headers: {\n          'Authorization': basicAuth\n        }\n      })\n      return  credentials\n    } catch (err) {\n      return false\n    }\n  }\n\n  static async getAllUsers() {\n    try {\n      const response = await Instance.get('/users')\n      return response.data\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  static async addNewUser(payload) {\n    try {\n      await Instance.post('/users', payload)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  static async editUser(payload, id) {\n    try {\n      await Instance.put(`/users/${id}`, payload)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  static async deleteUser(id) {\n    try {\n      await Instance.delete(`/users/${id}`)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useMemo} from 'react';\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CInput,\n  CLabel, CModal,\n  CModalBody, CModalFooter,\n  CModalHeader,\n  CRow\n} from \"@coreui/react\";\n\nconst MyModal = ({visible, setVisible, userData, setUserData, updateUsers}) => {\n\n  const isButtonDisabled = useMemo(() => {\n    return !(userData.firstName && userData.lastName &&\n      userData.email && userData.username)\n  }, [userData])\n\n  return (\n    <div>\n      <CModal\n        show={visible}\n      >\n        <CModalHeader>Пользователь</CModalHeader>\n        <CModalBody>\n          <CContainer fluid>\n            <CRow>\n              <CCol sm=\"12\">\n                <CForm action=\"\" method=\"post\">\n                  <CFormGroup>\n                    <CLabel>Имя</CLabel>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Введите имя..\"\n                      value={userData.firstName}\n                      onChange={e => setUserData({...userData, firstName: e.target.value})}\n                    />\n                    <CFormText className=\"help-block\">Введите имя</CFormText>\n                  </CFormGroup>\n\n                  <CFormGroup>\n                    <CLabel>Фамилия</CLabel>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Введите фамилию..\"\n                      value={userData.lastName}\n                      onChange={e => setUserData({...userData, lastName: e.target.value})}\n                    />\n                    <CFormText className=\"help-block\">Введите фамилию</CFormText>\n                  </CFormGroup>\n\n                  <CFormGroup>\n                    <CLabel htmlFor=\"nf-email\">Email</CLabel>\n                    <CInput\n                      type=\"email\"\n                      id=\"nf-email\"\n                      name=\"nf-email\"\n                      placeholder=\"Введите Email..\"\n                      autoComplete=\"email\"\n                      value={userData.email}\n                      onChange={e => setUserData({...userData, email: e.target.value})}\n                    />\n                    <CFormText className=\"help-block\">Введите email</CFormText>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CLabel>Пароль</CLabel>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Введите пароль..\"\n                      value={userData.password}\n                      onChange={e => setUserData({...userData, password: e.target.value})}\n                    />\n                    <CFormText className=\"help-block\">Введите пароль</CFormText>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CLabel>Имя пользователя</CLabel>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Введите имя пользователя..\"\n                      value={userData.username}\n                      onChange={e => setUserData({...userData, username: e.target.value})}\n                    />\n                    <CFormText className=\"help-block\">Введите имя пользователя</CFormText>\n                  </CFormGroup>\n\n                </CForm>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"primary\"\n            onClick={() => updateUsers(userData)}\n            disabled={isButtonDisabled}\n          >\n            Сохранить\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            onClick={() => setVisible(false)}\n          >Отмена</CButton>\n        </CModalFooter>\n      </CModal>\n    </div>\n  );\n};\n\nexport default MyModal;\n","import React, {useEffect, useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CDataTable,\n  CCollapse,\n} from '@coreui/react'\nimport UsersApi from \"../../API/UsersApi\";\nimport MyModal from \"../../myComponents/MyModal\";\n\nconst Dashboard = () => {\n  const userState = {firstName: '', lastName: '', email: '', password: undefined, username: ''}\n\n  const [allUsers, setUsers] = useState([]);\n  const [details, setDetails] = useState([]);\n  const [modalNewUserVisibility, setModalNewUserVisibility] = useState(false);\n  const [modalEditUserVisibility, setModalVEditUserVisibility] = useState(false);\n  const [userData, setUserData] = useState(userState)\n\n\n  const fields = [\n    {key: \"firstName\", label: \"Имя\", _style: {width: '25%'}},\n    {key: \"lastName\", label: \"Фамилия\", _style: {width: '25%'}},\n    {key: \"email\", label: \"Почта\", _style: {width: '25%'}},\n    {key: \"username\", label: \"Имя пользователя\", _style: {width: '20%'}},\n    {key: 'show_details', label: \"\", _style: {width: '5%'}, filter: false, sorter: false},\n  ]\n\n  useEffect(() => {\n    fetchingUsers()\n  }, []);\n\n\n  const fetchingUsers = async () => {\n    const users = await UsersApi.getAllUsers()\n    setUsers(users)\n  }\n\n  const toggleDetails = (index) => {\n    const position = details.indexOf(index)\n    let newDetails = details.slice()\n    if (position !== -1) {\n      newDetails.splice(position, 1)\n    } else {\n      newDetails = [...details, index]\n    }\n    setDetails(newDetails)\n  }\n\n  const createNewUser = async (user) => {\n    await UsersApi.addNewUser(user)\n    setModalNewUserVisibility(!modalNewUserVisibility)\n    await fetchingUsers()\n  }\n\n  const editUser = async (user) => {\n    await UsersApi.editUser(user, user.id)\n    setModalVEditUserVisibility(!modalEditUserVisibility)\n    await fetchingUsers()\n  }\n\n  const toggleModalNewUser = () => {\n    setUserData(userState)\n    setModalNewUserVisibility(!modalNewUserVisibility)\n  }\n\n  const toggleModalEditUser = (user) => {\n    setUserData(user)\n    setModalVEditUserVisibility(!modalEditUserVisibility)\n  }\n\n  const deleteUser = async (id) => {\n    await UsersApi.deleteUser(id)\n    await fetchingUsers()\n  }\n\n  return (\n    <div>\n      <CButton\n        color=\"primary\"\n        onClick={toggleModalNewUser}\n        className=\"mb-2\"\n      >Добавить нового пользователя\n      </CButton>\n      <CCard>\n        <CDataTable\n          items={allUsers}\n          fields={fields}\n          itemsPerPage={10}\n          pagination={\n            {align: \"center\"}\n          }\n          sorter\n          filter\n          columnFilter\n          tableFilter\n          striped\n          scopedSlots={{\n            'show_details':\n              (item, index) => {\n                return (\n                  <td className=\"py-2\">\n                    <CButton\n                      color=\"primary\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        toggleDetails(index)\n                      }}\n                    >\n                      Действия\n                    </CButton>\n                  </td>\n                )\n              },\n            'details':\n              (item, index) => {\n                return (\n                  <CCollapse show={details.includes(index)}>\n                    <CCardBody>\n                      <h4>\n                        {item.firstName} {item.lastName}\n                      </h4>\n                      <>\n                        <CButton\n                          size=\"sm\"\n                          color=\"primary\"\n                          onClick={() => toggleModalEditUser(item)}\n                        >\n                          Редактировать\n                        </CButton>\n                      </>\n                      <CButton\n                        size=\"sm\"\n                        color=\"danger\"\n                        className=\"ml-1\"\n                        onClick={() => deleteUser(item.id)}\n                      >\n                        Удалить\n                      </CButton>\n                    </CCardBody>\n                  </CCollapse>\n                )\n              }\n          }}\n        >\n        </CDataTable>\n      </CCard>\n\n      <MyModal\n        visible={modalNewUserVisibility}\n        setVisible={setModalNewUserVisibility}\n        userData={userData}\n        setUserData={setUserData}\n        updateUsers={createNewUser}\n      />\n\n      <MyModal\n        visible={modalEditUserVisibility}\n        setVisible={setModalVEditUserVisibility}\n        userData={userData}\n        setUserData={setUserData}\n        updateUsers={editUser}\n      />\n    </div>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}